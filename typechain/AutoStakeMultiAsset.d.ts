/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AutoStakeMultiAssetInterface extends ethers.utils.Interface {
  functions: {
    "UNIT_FARM()": FunctionFragment;
    "balance(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfJoint(address)": FunctionFragment;
    "controller()": FunctionFragment;
    "debtPerDebtShare()": FunctionFragment;
    "debtShare(address)": FunctionFragment;
    "exit()": FunctionFragment;
    "farm()": FunctionFragment;
    "farmAutoStake()": FunctionFragment;
    "farmPerToken()": FunctionFragment;
    "forceGreyListedExit(address)": FunctionFragment;
    "governance()": FunctionFragment;
    "greylistEscrow()": FunctionFragment;
    "lpToken()": FunctionFragment;
    "refreshAutoStake()": FunctionFragment;
    "rewardPool()": FunctionFragment;
    "setGreylistEscrow(address)": FunctionFragment;
    "setStorage(address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "store()": FunctionFragment;
    "totalBalanceFarm()": FunctionFragment;
    "totalBalanceLp()": FunctionFragment;
    "totalDebtShares()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "UNIT_FARM", values?: undefined): string;
  encodeFunctionData(functionFragment: "balance", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfJoint",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtPerDebtShare",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "debtShare", values: [string]): string;
  encodeFunctionData(functionFragment: "exit", values?: undefined): string;
  encodeFunctionData(functionFragment: "farm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "farmAutoStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "farmPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceGreyListedExit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "greylistEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refreshAutoStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGreylistEscrow",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setStorage", values: [string]): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "store", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBalanceFarm",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBalanceLp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDebtShares",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "UNIT_FARM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfJoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "debtPerDebtShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtShare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "farm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "farmAutoStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceGreyListedExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "greylistEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refreshAutoStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGreylistEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStorage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBalanceFarm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBalanceLp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDebtShares",
    data: BytesLike
  ): Result;

  events: {
    "DecreaseInFarm()": EventFragment;
    "ForceGreylistExited(address,uint256)": EventFragment;
    "SmartContractDenied(address)": EventFragment;
    "SmartContractRecorded(address,address)": EventFragment;
    "Staked(address,uint256,uint256,uint256)": EventFragment;
    "StakingDenied(address,uint256)": EventFragment;
    "Withdrawn(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DecreaseInFarm"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForceGreylistExited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SmartContractDenied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SmartContractRecorded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingDenied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class AutoStakeMultiAsset extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AutoStakeMultiAssetInterface;

  functions: {
    UNIT_FARM(overrides?: CallOverrides): Promise<[BigNumber]>;

    "UNIT_FARM()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    balance(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(who: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfJoint(
      who: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "balanceOfJoint(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    "controller()"(overrides?: CallOverrides): Promise<[string]>;

    debtPerDebtShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    "debtPerDebtShare()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    debtShare(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "debtShare(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    exit(overrides?: Overrides): Promise<ContractTransaction>;

    "exit()"(overrides?: Overrides): Promise<ContractTransaction>;

    farm(overrides?: CallOverrides): Promise<[string]>;

    "farm()"(overrides?: CallOverrides): Promise<[string]>;

    farmAutoStake(overrides?: CallOverrides): Promise<[string]>;

    "farmAutoStake()"(overrides?: CallOverrides): Promise<[string]>;

    farmPerToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    "farmPerToken()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    forceGreyListedExit(
      greyListed: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "forceGreyListedExit(address)"(
      greyListed: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    "governance()"(overrides?: CallOverrides): Promise<[string]>;

    greylistEscrow(overrides?: CallOverrides): Promise<[string]>;

    "greylistEscrow()"(overrides?: CallOverrides): Promise<[string]>;

    lpToken(overrides?: CallOverrides): Promise<[string]>;

    "lpToken()"(overrides?: CallOverrides): Promise<[string]>;

    refreshAutoStake(overrides?: Overrides): Promise<ContractTransaction>;

    "refreshAutoStake()"(overrides?: Overrides): Promise<ContractTransaction>;

    rewardPool(overrides?: CallOverrides): Promise<[string]>;

    "rewardPool()"(overrides?: CallOverrides): Promise<[string]>;

    setGreylistEscrow(
      _greylistEscrow: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGreylistEscrow(address)"(
      _greylistEscrow: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStorage(
      _store: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStorage(address)"(
      _store: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    store(overrides?: CallOverrides): Promise<[string]>;

    "store()"(overrides?: CallOverrides): Promise<[string]>;

    totalBalanceFarm(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalBalanceFarm()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBalanceLp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalBalanceLp()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDebtShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalDebtShares()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  UNIT_FARM(overrides?: CallOverrides): Promise<BigNumber>;

  "UNIT_FARM()"(overrides?: CallOverrides): Promise<BigNumber>;

  balance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balance(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(who: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    who: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfJoint(
    who: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "balanceOfJoint(address)"(
    who: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  controller(overrides?: CallOverrides): Promise<string>;

  "controller()"(overrides?: CallOverrides): Promise<string>;

  debtPerDebtShare(overrides?: CallOverrides): Promise<BigNumber>;

  "debtPerDebtShare()"(overrides?: CallOverrides): Promise<BigNumber>;

  debtShare(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "debtShare(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exit(overrides?: Overrides): Promise<ContractTransaction>;

  "exit()"(overrides?: Overrides): Promise<ContractTransaction>;

  farm(overrides?: CallOverrides): Promise<string>;

  "farm()"(overrides?: CallOverrides): Promise<string>;

  farmAutoStake(overrides?: CallOverrides): Promise<string>;

  "farmAutoStake()"(overrides?: CallOverrides): Promise<string>;

  farmPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  "farmPerToken()"(overrides?: CallOverrides): Promise<BigNumber>;

  forceGreyListedExit(
    greyListed: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "forceGreyListedExit(address)"(
    greyListed: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  greylistEscrow(overrides?: CallOverrides): Promise<string>;

  "greylistEscrow()"(overrides?: CallOverrides): Promise<string>;

  lpToken(overrides?: CallOverrides): Promise<string>;

  "lpToken()"(overrides?: CallOverrides): Promise<string>;

  refreshAutoStake(overrides?: Overrides): Promise<ContractTransaction>;

  "refreshAutoStake()"(overrides?: Overrides): Promise<ContractTransaction>;

  rewardPool(overrides?: CallOverrides): Promise<string>;

  "rewardPool()"(overrides?: CallOverrides): Promise<string>;

  setGreylistEscrow(
    _greylistEscrow: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGreylistEscrow(address)"(
    _greylistEscrow: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStorage(
    _store: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStorage(address)"(
    _store: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stake(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  store(overrides?: CallOverrides): Promise<string>;

  "store()"(overrides?: CallOverrides): Promise<string>;

  totalBalanceFarm(overrides?: CallOverrides): Promise<BigNumber>;

  "totalBalanceFarm()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalBalanceLp(overrides?: CallOverrides): Promise<BigNumber>;

  "totalBalanceLp()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalDebtShares(overrides?: CallOverrides): Promise<BigNumber>;

  "totalDebtShares()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    UNIT_FARM(overrides?: CallOverrides): Promise<BigNumber>;

    "UNIT_FARM()"(overrides?: CallOverrides): Promise<BigNumber>;

    balance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfJoint(
      who: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "balanceOfJoint(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    controller(overrides?: CallOverrides): Promise<string>;

    "controller()"(overrides?: CallOverrides): Promise<string>;

    debtPerDebtShare(overrides?: CallOverrides): Promise<BigNumber>;

    "debtPerDebtShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    debtShare(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "debtShare(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exit(overrides?: CallOverrides): Promise<void>;

    "exit()"(overrides?: CallOverrides): Promise<void>;

    farm(overrides?: CallOverrides): Promise<string>;

    "farm()"(overrides?: CallOverrides): Promise<string>;

    farmAutoStake(overrides?: CallOverrides): Promise<string>;

    "farmAutoStake()"(overrides?: CallOverrides): Promise<string>;

    farmPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    "farmPerToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    forceGreyListedExit(
      greyListed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "forceGreyListedExit(address)"(
      greyListed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    greylistEscrow(overrides?: CallOverrides): Promise<string>;

    "greylistEscrow()"(overrides?: CallOverrides): Promise<string>;

    lpToken(overrides?: CallOverrides): Promise<string>;

    "lpToken()"(overrides?: CallOverrides): Promise<string>;

    refreshAutoStake(overrides?: CallOverrides): Promise<void>;

    "refreshAutoStake()"(overrides?: CallOverrides): Promise<void>;

    rewardPool(overrides?: CallOverrides): Promise<string>;

    "rewardPool()"(overrides?: CallOverrides): Promise<string>;

    setGreylistEscrow(
      _greylistEscrow: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGreylistEscrow(address)"(
      _greylistEscrow: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStorage(_store: string, overrides?: CallOverrides): Promise<void>;

    "setStorage(address)"(
      _store: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    store(overrides?: CallOverrides): Promise<string>;

    "store()"(overrides?: CallOverrides): Promise<string>;

    totalBalanceFarm(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBalanceFarm()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalanceLp(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBalanceLp()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebtShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalDebtShares()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    DecreaseInFarm(): EventFilter;

    ForceGreylistExited(grelisted: string | null, amount: null): EventFilter;

    SmartContractDenied(greylistedAddress: string | null): EventFilter;

    SmartContractRecorded(
      smartContractAddress: string | null,
      smartContractInitiator: string | null
    ): EventFilter;

    Staked(
      user: string | null,
      amount: null,
      balanceOfLp: null,
      balanceOfFarm: null
    ): EventFilter;

    StakingDenied(user: string | null, amount: null): EventFilter;

    Withdrawn(user: string | null, lp: null, farm: null): EventFilter;
  };

  estimateGas: {
    UNIT_FARM(overrides?: CallOverrides): Promise<BigNumber>;

    "UNIT_FARM()"(overrides?: CallOverrides): Promise<BigNumber>;

    balance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfJoint(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfJoint(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    "controller()"(overrides?: CallOverrides): Promise<BigNumber>;

    debtPerDebtShare(overrides?: CallOverrides): Promise<BigNumber>;

    "debtPerDebtShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    debtShare(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "debtShare(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exit(overrides?: Overrides): Promise<BigNumber>;

    "exit()"(overrides?: Overrides): Promise<BigNumber>;

    farm(overrides?: CallOverrides): Promise<BigNumber>;

    "farm()"(overrides?: CallOverrides): Promise<BigNumber>;

    farmAutoStake(overrides?: CallOverrides): Promise<BigNumber>;

    "farmAutoStake()"(overrides?: CallOverrides): Promise<BigNumber>;

    farmPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    "farmPerToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    forceGreyListedExit(
      greyListed: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "forceGreyListedExit(address)"(
      greyListed: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    greylistEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    "greylistEscrow()"(overrides?: CallOverrides): Promise<BigNumber>;

    lpToken(overrides?: CallOverrides): Promise<BigNumber>;

    "lpToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    refreshAutoStake(overrides?: Overrides): Promise<BigNumber>;

    "refreshAutoStake()"(overrides?: Overrides): Promise<BigNumber>;

    rewardPool(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    setGreylistEscrow(
      _greylistEscrow: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setGreylistEscrow(address)"(
      _greylistEscrow: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setStorage(_store: string, overrides?: Overrides): Promise<BigNumber>;

    "setStorage(address)"(
      _store: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stake(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    store(overrides?: CallOverrides): Promise<BigNumber>;

    "store()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalanceFarm(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBalanceFarm()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalanceLp(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBalanceLp()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebtShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalDebtShares()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    UNIT_FARM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "UNIT_FARM()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfJoint(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfJoint(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtPerDebtShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "debtPerDebtShare()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtShare(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "debtShare(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exit(overrides?: Overrides): Promise<PopulatedTransaction>;

    "exit()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    farm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "farm()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    farmAutoStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "farmAutoStake()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    farmPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "farmPerToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forceGreyListedExit(
      greyListed: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "forceGreyListedExit(address)"(
      greyListed: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    greylistEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "greylistEscrow()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lpToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refreshAutoStake(overrides?: Overrides): Promise<PopulatedTransaction>;

    "refreshAutoStake()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rewardPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGreylistEscrow(
      _greylistEscrow: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGreylistEscrow(address)"(
      _greylistEscrow: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStorage(
      _store: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStorage(address)"(
      _store: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    store(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "store()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBalanceFarm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalBalanceFarm()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBalanceLp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalBalanceLp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDebtShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalDebtShares()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
