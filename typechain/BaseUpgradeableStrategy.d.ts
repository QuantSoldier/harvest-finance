/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BaseUpgradeableStrategyInterface extends ethers.utils.Interface {
  functions: {
    "controller()": FunctionFragment;
    "governance()": FunctionFragment;
    "initialize(address,address,address,address,address,uint256,uint256,bool,uint256,uint256)": FunctionFragment;
    "nextImplementation()": FunctionFragment;
    "nextImplementationDelay()": FunctionFragment;
    "nextImplementationTimestamp()": FunctionFragment;
    "pausedInvesting()": FunctionFragment;
    "profitSharingDenominator()": FunctionFragment;
    "profitSharingNumerator()": FunctionFragment;
    "rewardPool()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "scheduleUpgrade(address)": FunctionFragment;
    "sell()": FunctionFragment;
    "sellFloor()": FunctionFragment;
    "setStorage(address)": FunctionFragment;
    "shouldUpgrade()": FunctionFragment;
    "underlying()": FunctionFragment;
    "vault()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nextImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextImplementationDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextImplementationTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pausedInvesting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "profitSharingDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "profitSharingNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleUpgrade",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "sell", values?: undefined): string;
  encodeFunctionData(functionFragment: "sellFloor", values?: undefined): string;
  encodeFunctionData(functionFragment: "setStorage", values: [string]): string;
  encodeFunctionData(
    functionFragment: "shouldUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextImplementationDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextImplementationTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pausedInvesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "profitSharingDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "profitSharingNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellFloor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStorage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shouldUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "ProfitLogInReward(uint256,uint256,uint256)": EventFragment;
    "ProfitsNotCollected(bool,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProfitLogInReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfitsNotCollected"): EventFragment;
}

export class BaseUpgradeableStrategy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BaseUpgradeableStrategyInterface;

  functions: {
    controller(overrides?: CallOverrides): Promise<[string]>;

    "controller()"(overrides?: CallOverrides): Promise<[string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    "governance()"(overrides?: CallOverrides): Promise<[string]>;

    "initialize(address,address,address,address,address,uint256,uint256,bool,uint256,uint256)"(
      _storage: string,
      _underlying: string,
      _vault: string,
      _rewardPool: string,
      _rewardToken: string,
      _profitSharingNumerator: BigNumberish,
      _profitSharingDenominator: BigNumberish,
      _sell: boolean,
      _sellFloor: BigNumberish,
      _implementationChangeDelay: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _storage: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    nextImplementation(overrides?: CallOverrides): Promise<[string]>;

    "nextImplementation()"(overrides?: CallOverrides): Promise<[string]>;

    nextImplementationDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextImplementationDelay()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nextImplementationTimestamp(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "nextImplementationTimestamp()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pausedInvesting(overrides?: CallOverrides): Promise<[boolean]>;

    "pausedInvesting()"(overrides?: CallOverrides): Promise<[boolean]>;

    profitSharingDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    "profitSharingDenominator()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    profitSharingNumerator(overrides?: CallOverrides): Promise<[BigNumber]>;

    "profitSharingNumerator()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPool(overrides?: CallOverrides): Promise<[string]>;

    "rewardPool()"(overrides?: CallOverrides): Promise<[string]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    "rewardToken()"(overrides?: CallOverrides): Promise<[string]>;

    scheduleUpgrade(
      impl: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "scheduleUpgrade(address)"(
      impl: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sell(overrides?: CallOverrides): Promise<[boolean]>;

    "sell()"(overrides?: CallOverrides): Promise<[boolean]>;

    sellFloor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "sellFloor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setStorage(
      _store: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStorage(address)"(
      _store: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shouldUpgrade(overrides?: CallOverrides): Promise<[boolean, string]>;

    "shouldUpgrade()"(overrides?: CallOverrides): Promise<[boolean, string]>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    "underlying()"(overrides?: CallOverrides): Promise<[string]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    "vault()"(overrides?: CallOverrides): Promise<[string]>;
  };

  controller(overrides?: CallOverrides): Promise<string>;

  "controller()"(overrides?: CallOverrides): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  "initialize(address,address,address,address,address,uint256,uint256,bool,uint256,uint256)"(
    _storage: string,
    _underlying: string,
    _vault: string,
    _rewardPool: string,
    _rewardToken: string,
    _profitSharingNumerator: BigNumberish,
    _profitSharingDenominator: BigNumberish,
    _sell: boolean,
    _sellFloor: BigNumberish,
    _implementationChangeDelay: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _storage: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  nextImplementation(overrides?: CallOverrides): Promise<string>;

  "nextImplementation()"(overrides?: CallOverrides): Promise<string>;

  nextImplementationDelay(overrides?: CallOverrides): Promise<BigNumber>;

  "nextImplementationDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

  nextImplementationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "nextImplementationTimestamp()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pausedInvesting(overrides?: CallOverrides): Promise<boolean>;

  "pausedInvesting()"(overrides?: CallOverrides): Promise<boolean>;

  profitSharingDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  "profitSharingDenominator()"(overrides?: CallOverrides): Promise<BigNumber>;

  profitSharingNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  "profitSharingNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPool(overrides?: CallOverrides): Promise<string>;

  "rewardPool()"(overrides?: CallOverrides): Promise<string>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  "rewardToken()"(overrides?: CallOverrides): Promise<string>;

  scheduleUpgrade(
    impl: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "scheduleUpgrade(address)"(
    impl: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sell(overrides?: CallOverrides): Promise<boolean>;

  "sell()"(overrides?: CallOverrides): Promise<boolean>;

  sellFloor(overrides?: CallOverrides): Promise<BigNumber>;

  "sellFloor()"(overrides?: CallOverrides): Promise<BigNumber>;

  setStorage(
    _store: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStorage(address)"(
    _store: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shouldUpgrade(overrides?: CallOverrides): Promise<[boolean, string]>;

  "shouldUpgrade()"(overrides?: CallOverrides): Promise<[boolean, string]>;

  underlying(overrides?: CallOverrides): Promise<string>;

  "underlying()"(overrides?: CallOverrides): Promise<string>;

  vault(overrides?: CallOverrides): Promise<string>;

  "vault()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    controller(overrides?: CallOverrides): Promise<string>;

    "controller()"(overrides?: CallOverrides): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    "initialize(address,address,address,address,address,uint256,uint256,bool,uint256,uint256)"(
      _storage: string,
      _underlying: string,
      _vault: string,
      _rewardPool: string,
      _rewardToken: string,
      _profitSharingNumerator: BigNumberish,
      _profitSharingDenominator: BigNumberish,
      _sell: boolean,
      _sellFloor: BigNumberish,
      _implementationChangeDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      _storage: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nextImplementation(overrides?: CallOverrides): Promise<string>;

    "nextImplementation()"(overrides?: CallOverrides): Promise<string>;

    nextImplementationDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "nextImplementationDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextImplementationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "nextImplementationTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pausedInvesting(overrides?: CallOverrides): Promise<boolean>;

    "pausedInvesting()"(overrides?: CallOverrides): Promise<boolean>;

    profitSharingDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    "profitSharingDenominator()"(overrides?: CallOverrides): Promise<BigNumber>;

    profitSharingNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "profitSharingNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPool(overrides?: CallOverrides): Promise<string>;

    "rewardPool()"(overrides?: CallOverrides): Promise<string>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    "rewardToken()"(overrides?: CallOverrides): Promise<string>;

    scheduleUpgrade(impl: string, overrides?: CallOverrides): Promise<void>;

    "scheduleUpgrade(address)"(
      impl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sell(overrides?: CallOverrides): Promise<boolean>;

    "sell()"(overrides?: CallOverrides): Promise<boolean>;

    sellFloor(overrides?: CallOverrides): Promise<BigNumber>;

    "sellFloor()"(overrides?: CallOverrides): Promise<BigNumber>;

    setStorage(_store: string, overrides?: CallOverrides): Promise<void>;

    "setStorage(address)"(
      _store: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shouldUpgrade(overrides?: CallOverrides): Promise<[boolean, string]>;

    "shouldUpgrade()"(overrides?: CallOverrides): Promise<[boolean, string]>;

    underlying(overrides?: CallOverrides): Promise<string>;

    "underlying()"(overrides?: CallOverrides): Promise<string>;

    vault(overrides?: CallOverrides): Promise<string>;

    "vault()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ProfitLogInReward(
      profitAmount: null,
      feeAmount: null,
      timestamp: null
    ): EventFilter;

    ProfitsNotCollected(sell: null, floor: null): EventFilter;
  };

  estimateGas: {
    controller(overrides?: CallOverrides): Promise<BigNumber>;

    "controller()"(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    "initialize(address,address,address,address,address,uint256,uint256,bool,uint256,uint256)"(
      _storage: string,
      _underlying: string,
      _vault: string,
      _rewardPool: string,
      _rewardToken: string,
      _profitSharingNumerator: BigNumberish,
      _profitSharingDenominator: BigNumberish,
      _sell: boolean,
      _sellFloor: BigNumberish,
      _implementationChangeDelay: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address)"(
      _storage: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    nextImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    "nextImplementation()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextImplementationDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "nextImplementationDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextImplementationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "nextImplementationTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pausedInvesting(overrides?: CallOverrides): Promise<BigNumber>;

    "pausedInvesting()"(overrides?: CallOverrides): Promise<BigNumber>;

    profitSharingDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    "profitSharingDenominator()"(overrides?: CallOverrides): Promise<BigNumber>;

    profitSharingNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "profitSharingNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPool(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    scheduleUpgrade(impl: string, overrides?: Overrides): Promise<BigNumber>;

    "scheduleUpgrade(address)"(
      impl: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sell(overrides?: CallOverrides): Promise<BigNumber>;

    "sell()"(overrides?: CallOverrides): Promise<BigNumber>;

    sellFloor(overrides?: CallOverrides): Promise<BigNumber>;

    "sellFloor()"(overrides?: CallOverrides): Promise<BigNumber>;

    setStorage(_store: string, overrides?: Overrides): Promise<BigNumber>;

    "setStorage(address)"(
      _store: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shouldUpgrade(overrides?: CallOverrides): Promise<BigNumber>;

    "shouldUpgrade()"(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    "underlying()"(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    "vault()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,address,uint256,uint256,bool,uint256,uint256)"(
      _storage: string,
      _underlying: string,
      _vault: string,
      _rewardPool: string,
      _rewardToken: string,
      _profitSharingNumerator: BigNumberish,
      _profitSharingDenominator: BigNumberish,
      _sell: boolean,
      _sellFloor: BigNumberish,
      _implementationChangeDelay: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _storage: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    nextImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nextImplementation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextImplementationDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nextImplementationDelay()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextImplementationTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nextImplementationTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pausedInvesting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pausedInvesting()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    profitSharingDenominator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "profitSharingDenominator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    profitSharingNumerator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "profitSharingNumerator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scheduleUpgrade(
      impl: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "scheduleUpgrade(address)"(
      impl: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sell(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sell()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellFloor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sellFloor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setStorage(
      _store: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStorage(address)"(
      _store: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shouldUpgrade(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shouldUpgrade()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "underlying()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
