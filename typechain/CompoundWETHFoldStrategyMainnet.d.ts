/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CompoundWETHFoldStrategyMainnetInterface
  extends ethers.utils.Interface {
  functions: {
    "__comp()": FunctionFragment;
    "__comptroller()": FunctionFragment;
    "__ctoken()": FunctionFragment;
    "__underlying()": FunctionFragment;
    "__uniswap()": FunctionFragment;
    "_weth()": FunctionFragment;
    "allowEmergencyLiquidityShortage()": FunctionFragment;
    "borrowMinThreshold()": FunctionFragment;
    "borrowedInUnderlying()": FunctionFragment;
    "claimComp()": FunctionFragment;
    "collateralFactorDenominator()": FunctionFragment;
    "collateralFactorNumerator()": FunctionFragment;
    "comp()": FunctionFragment;
    "comptroller()": FunctionFragment;
    "controller()": FunctionFragment;
    "ctoken()": FunctionFragment;
    "depositArbCheck()": FunctionFragment;
    "doHardWork()": FunctionFragment;
    "emergencyExit()": FunctionFragment;
    "folds()": FunctionFragment;
    "getLiquidity()": FunctionFragment;
    "governance()": FunctionFragment;
    "investAllUnderlying()": FunctionFragment;
    "investedUnderlyingBalance()": FunctionFragment;
    "liquidationAllowed()": FunctionFragment;
    "liquidityLoanCurrent()": FunctionFragment;
    "liquidityLoanTarget()": FunctionFragment;
    "liquidityRecipient()": FunctionFragment;
    "profitSharingDenominator()": FunctionFragment;
    "profitSharingNumerator()": FunctionFragment;
    "provideLoan()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "salvage(address,address,uint256)": FunctionFragment;
    "sellFloor()": FunctionFragment;
    "setAllowLiquidityShortage(bool)": FunctionFragment;
    "setBorrowMinThreshold(uint256)": FunctionFragment;
    "setCollateralFactorNumerator(uint256)": FunctionFragment;
    "setFolds(uint256)": FunctionFragment;
    "setLiquidationAllowed(bool)": FunctionFragment;
    "setLiquidityLoanTarget(uint256)": FunctionFragment;
    "setLiquidityRecipient(address)": FunctionFragment;
    "setSellFloor(uint256)": FunctionFragment;
    "setStorage(address)": FunctionFragment;
    "settleLoan(uint256)": FunctionFragment;
    "store()": FunctionFragment;
    "suppliedInUnderlying()": FunctionFragment;
    "tenWeth()": FunctionFragment;
    "underlying()": FunctionFragment;
    "uniswapRouterV2()": FunctionFragment;
    "unsalvagableTokens(address)": FunctionFragment;
    "vault()": FunctionFragment;
    "withdrawAllToVault()": FunctionFragment;
    "withdrawToVault(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "__comp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "__comptroller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "__ctoken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "__underlying",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "__uniswap", values?: undefined): string;
  encodeFunctionData(functionFragment: "_weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowEmergencyLiquidityShortage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowMinThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowedInUnderlying",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claimComp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collateralFactorDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralFactorNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "comp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "comptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ctoken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositArbCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "doHardWork",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyExit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "folds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investAllUnderlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investedUnderlyingBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityLoanCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityLoanTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "profitSharingDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "profitSharingNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "provideLoan",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "salvage",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sellFloor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAllowLiquidityShortage",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowMinThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralFactorNumerator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFolds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationAllowed",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityLoanTarget",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSellFloor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setStorage", values: [string]): string;
  encodeFunctionData(
    functionFragment: "settleLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "store", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "suppliedInUnderlying",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tenWeth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapRouterV2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unsalvagableTokens",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawAllToVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToVault",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "__comp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__comptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "__ctoken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__underlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "__uniswap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowEmergencyLiquidityShortage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowMinThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowedInUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimComp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralFactorDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralFactorNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "comp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "comptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ctoken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositArbCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "doHardWork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "folds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investAllUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investedUnderlyingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityLoanCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityLoanTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "profitSharingDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "profitSharingNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provideLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "salvage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellFloor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowLiquidityShortage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowMinThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralFactorNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFolds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityLoanTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSellFloor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStorage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settleLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "suppliedInUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tenWeth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapRouterV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsalvagableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToVault",
    data: BytesLike
  ): Result;

  events: {
    "Liquidated(uint256)": EventFragment;
    "ProfitLogInReward(uint256,uint256,uint256)": EventFragment;
    "ProfitNotClaimed()": EventFragment;
    "TooLowBalance()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Liquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfitLogInReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfitNotClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TooLowBalance"): EventFragment;
}

export class CompoundWETHFoldStrategyMainnet extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CompoundWETHFoldStrategyMainnetInterface;

  functions: {
    __comp(overrides?: CallOverrides): Promise<[string]>;

    "__comp()"(overrides?: CallOverrides): Promise<[string]>;

    __comptroller(overrides?: CallOverrides): Promise<[string]>;

    "__comptroller()"(overrides?: CallOverrides): Promise<[string]>;

    __ctoken(overrides?: CallOverrides): Promise<[string]>;

    "__ctoken()"(overrides?: CallOverrides): Promise<[string]>;

    __underlying(overrides?: CallOverrides): Promise<[string]>;

    "__underlying()"(overrides?: CallOverrides): Promise<[string]>;

    __uniswap(overrides?: CallOverrides): Promise<[string]>;

    "__uniswap()"(overrides?: CallOverrides): Promise<[string]>;

    _weth(overrides?: CallOverrides): Promise<[string]>;

    "_weth()"(overrides?: CallOverrides): Promise<[string]>;

    allowEmergencyLiquidityShortage(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "allowEmergencyLiquidityShortage()"(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    borrowMinThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    "borrowMinThreshold()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowedInUnderlying(overrides?: CallOverrides): Promise<[BigNumber]>;

    "borrowedInUnderlying()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimComp(overrides?: Overrides): Promise<ContractTransaction>;

    "claimComp()"(overrides?: Overrides): Promise<ContractTransaction>;

    collateralFactorDenominator(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "collateralFactorDenominator()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralFactorNumerator(overrides?: CallOverrides): Promise<[BigNumber]>;

    "collateralFactorNumerator()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    comp(overrides?: CallOverrides): Promise<[string]>;

    "comp()"(overrides?: CallOverrides): Promise<[string]>;

    comptroller(overrides?: CallOverrides): Promise<[string]>;

    "comptroller()"(overrides?: CallOverrides): Promise<[string]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    "controller()"(overrides?: CallOverrides): Promise<[string]>;

    ctoken(overrides?: CallOverrides): Promise<[string]>;

    "ctoken()"(overrides?: CallOverrides): Promise<[string]>;

    depositArbCheck(overrides?: CallOverrides): Promise<[boolean]>;

    "depositArbCheck()"(overrides?: CallOverrides): Promise<[boolean]>;

    doHardWork(overrides?: Overrides): Promise<ContractTransaction>;

    "doHardWork()"(overrides?: Overrides): Promise<ContractTransaction>;

    emergencyExit(overrides?: Overrides): Promise<ContractTransaction>;

    "emergencyExit()"(overrides?: Overrides): Promise<ContractTransaction>;

    folds(overrides?: CallOverrides): Promise<[BigNumber]>;

    "folds()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getLiquidity()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    "governance()"(overrides?: CallOverrides): Promise<[string]>;

    investAllUnderlying(overrides?: Overrides): Promise<ContractTransaction>;

    "investAllUnderlying()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    investedUnderlyingBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "investedUnderlyingBalance()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidationAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    "liquidationAllowed()"(overrides?: CallOverrides): Promise<[boolean]>;

    liquidityLoanCurrent(overrides?: CallOverrides): Promise<[BigNumber]>;

    "liquidityLoanCurrent()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityLoanTarget(overrides?: CallOverrides): Promise<[BigNumber]>;

    "liquidityLoanTarget()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityRecipient(overrides?: CallOverrides): Promise<[string]>;

    "liquidityRecipient()"(overrides?: CallOverrides): Promise<[string]>;

    profitSharingDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    "profitSharingDenominator()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    profitSharingNumerator(overrides?: CallOverrides): Promise<[BigNumber]>;

    "profitSharingNumerator()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    provideLoan(overrides?: Overrides): Promise<ContractTransaction>;

    "provideLoan()"(overrides?: Overrides): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    "rewardToken()"(overrides?: CallOverrides): Promise<[string]>;

    salvage(
      recipient: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "salvage(address,address,uint256)"(
      recipient: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sellFloor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "sellFloor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAllowLiquidityShortage(
      allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAllowLiquidityShortage(bool)"(
      allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBorrowMinThreshold(
      threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBorrowMinThreshold(uint256)"(
      threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCollateralFactorNumerator(
      numerator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCollateralFactorNumerator(uint256)"(
      numerator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFolds(
      _folds: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFolds(uint256)"(
      _folds: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLiquidationAllowed(
      allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLiquidationAllowed(bool)"(
      allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLiquidityLoanTarget(
      target: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLiquidityLoanTarget(uint256)"(
      target: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLiquidityRecipient(
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLiquidityRecipient(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSellFloor(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSellFloor(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStorage(
      _store: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStorage(address)"(
      _store: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settleLoan(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "settleLoan(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    store(overrides?: CallOverrides): Promise<[string]>;

    "store()"(overrides?: CallOverrides): Promise<[string]>;

    suppliedInUnderlying(overrides?: CallOverrides): Promise<[BigNumber]>;

    "suppliedInUnderlying()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    tenWeth(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tenWeth()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    "underlying()"(overrides?: CallOverrides): Promise<[string]>;

    uniswapRouterV2(overrides?: CallOverrides): Promise<[string]>;

    "uniswapRouterV2()"(overrides?: CallOverrides): Promise<[string]>;

    unsalvagableTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "unsalvagableTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    "vault()"(overrides?: CallOverrides): Promise<[string]>;

    withdrawAllToVault(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawAllToVault()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawToVault(
      amountUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawToVault(uint256)"(
      amountUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  __comp(overrides?: CallOverrides): Promise<string>;

  "__comp()"(overrides?: CallOverrides): Promise<string>;

  __comptroller(overrides?: CallOverrides): Promise<string>;

  "__comptroller()"(overrides?: CallOverrides): Promise<string>;

  __ctoken(overrides?: CallOverrides): Promise<string>;

  "__ctoken()"(overrides?: CallOverrides): Promise<string>;

  __underlying(overrides?: CallOverrides): Promise<string>;

  "__underlying()"(overrides?: CallOverrides): Promise<string>;

  __uniswap(overrides?: CallOverrides): Promise<string>;

  "__uniswap()"(overrides?: CallOverrides): Promise<string>;

  _weth(overrides?: CallOverrides): Promise<string>;

  "_weth()"(overrides?: CallOverrides): Promise<string>;

  allowEmergencyLiquidityShortage(overrides?: CallOverrides): Promise<boolean>;

  "allowEmergencyLiquidityShortage()"(
    overrides?: CallOverrides
  ): Promise<boolean>;

  borrowMinThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "borrowMinThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  borrowedInUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

  "borrowedInUnderlying()"(overrides?: CallOverrides): Promise<BigNumber>;

  claimComp(overrides?: Overrides): Promise<ContractTransaction>;

  "claimComp()"(overrides?: Overrides): Promise<ContractTransaction>;

  collateralFactorDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  "collateralFactorDenominator()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralFactorNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  "collateralFactorNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

  comp(overrides?: CallOverrides): Promise<string>;

  "comp()"(overrides?: CallOverrides): Promise<string>;

  comptroller(overrides?: CallOverrides): Promise<string>;

  "comptroller()"(overrides?: CallOverrides): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  "controller()"(overrides?: CallOverrides): Promise<string>;

  ctoken(overrides?: CallOverrides): Promise<string>;

  "ctoken()"(overrides?: CallOverrides): Promise<string>;

  depositArbCheck(overrides?: CallOverrides): Promise<boolean>;

  "depositArbCheck()"(overrides?: CallOverrides): Promise<boolean>;

  doHardWork(overrides?: Overrides): Promise<ContractTransaction>;

  "doHardWork()"(overrides?: Overrides): Promise<ContractTransaction>;

  emergencyExit(overrides?: Overrides): Promise<ContractTransaction>;

  "emergencyExit()"(overrides?: Overrides): Promise<ContractTransaction>;

  folds(overrides?: CallOverrides): Promise<BigNumber>;

  "folds()"(overrides?: CallOverrides): Promise<BigNumber>;

  getLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  "getLiquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  investAllUnderlying(overrides?: Overrides): Promise<ContractTransaction>;

  "investAllUnderlying()"(overrides?: Overrides): Promise<ContractTransaction>;

  investedUnderlyingBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "investedUnderlyingBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationAllowed(overrides?: CallOverrides): Promise<boolean>;

  "liquidationAllowed()"(overrides?: CallOverrides): Promise<boolean>;

  liquidityLoanCurrent(overrides?: CallOverrides): Promise<BigNumber>;

  "liquidityLoanCurrent()"(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityLoanTarget(overrides?: CallOverrides): Promise<BigNumber>;

  "liquidityLoanTarget()"(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityRecipient(overrides?: CallOverrides): Promise<string>;

  "liquidityRecipient()"(overrides?: CallOverrides): Promise<string>;

  profitSharingDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  "profitSharingDenominator()"(overrides?: CallOverrides): Promise<BigNumber>;

  profitSharingNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  "profitSharingNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

  provideLoan(overrides?: Overrides): Promise<ContractTransaction>;

  "provideLoan()"(overrides?: Overrides): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  "rewardToken()"(overrides?: CallOverrides): Promise<string>;

  salvage(
    recipient: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "salvage(address,address,uint256)"(
    recipient: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sellFloor(overrides?: CallOverrides): Promise<BigNumber>;

  "sellFloor()"(overrides?: CallOverrides): Promise<BigNumber>;

  setAllowLiquidityShortage(
    allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAllowLiquidityShortage(bool)"(
    allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBorrowMinThreshold(
    threshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBorrowMinThreshold(uint256)"(
    threshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCollateralFactorNumerator(
    numerator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCollateralFactorNumerator(uint256)"(
    numerator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFolds(
    _folds: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFolds(uint256)"(
    _folds: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLiquidationAllowed(
    allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLiquidationAllowed(bool)"(
    allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLiquidityLoanTarget(
    target: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLiquidityLoanTarget(uint256)"(
    target: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLiquidityRecipient(
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLiquidityRecipient(address)"(
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSellFloor(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSellFloor(uint256)"(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStorage(
    _store: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStorage(address)"(
    _store: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settleLoan(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "settleLoan(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  store(overrides?: CallOverrides): Promise<string>;

  "store()"(overrides?: CallOverrides): Promise<string>;

  suppliedInUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

  "suppliedInUnderlying()"(overrides?: CallOverrides): Promise<BigNumber>;

  tenWeth(overrides?: CallOverrides): Promise<BigNumber>;

  "tenWeth()"(overrides?: CallOverrides): Promise<BigNumber>;

  underlying(overrides?: CallOverrides): Promise<string>;

  "underlying()"(overrides?: CallOverrides): Promise<string>;

  uniswapRouterV2(overrides?: CallOverrides): Promise<string>;

  "uniswapRouterV2()"(overrides?: CallOverrides): Promise<string>;

  unsalvagableTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "unsalvagableTokens(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  vault(overrides?: CallOverrides): Promise<string>;

  "vault()"(overrides?: CallOverrides): Promise<string>;

  withdrawAllToVault(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawAllToVault()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawToVault(
    amountUnderlying: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawToVault(uint256)"(
    amountUnderlying: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    __comp(overrides?: CallOverrides): Promise<string>;

    "__comp()"(overrides?: CallOverrides): Promise<string>;

    __comptroller(overrides?: CallOverrides): Promise<string>;

    "__comptroller()"(overrides?: CallOverrides): Promise<string>;

    __ctoken(overrides?: CallOverrides): Promise<string>;

    "__ctoken()"(overrides?: CallOverrides): Promise<string>;

    __underlying(overrides?: CallOverrides): Promise<string>;

    "__underlying()"(overrides?: CallOverrides): Promise<string>;

    __uniswap(overrides?: CallOverrides): Promise<string>;

    "__uniswap()"(overrides?: CallOverrides): Promise<string>;

    _weth(overrides?: CallOverrides): Promise<string>;

    "_weth()"(overrides?: CallOverrides): Promise<string>;

    allowEmergencyLiquidityShortage(
      overrides?: CallOverrides
    ): Promise<boolean>;

    "allowEmergencyLiquidityShortage()"(
      overrides?: CallOverrides
    ): Promise<boolean>;

    borrowMinThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowMinThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    borrowedInUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowedInUnderlying()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimComp(overrides?: CallOverrides): Promise<void>;

    "claimComp()"(overrides?: CallOverrides): Promise<void>;

    collateralFactorDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralFactorDenominator()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralFactorNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralFactorNumerator()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    comp(overrides?: CallOverrides): Promise<string>;

    "comp()"(overrides?: CallOverrides): Promise<string>;

    comptroller(overrides?: CallOverrides): Promise<string>;

    "comptroller()"(overrides?: CallOverrides): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    "controller()"(overrides?: CallOverrides): Promise<string>;

    ctoken(overrides?: CallOverrides): Promise<string>;

    "ctoken()"(overrides?: CallOverrides): Promise<string>;

    depositArbCheck(overrides?: CallOverrides): Promise<boolean>;

    "depositArbCheck()"(overrides?: CallOverrides): Promise<boolean>;

    doHardWork(overrides?: CallOverrides): Promise<void>;

    "doHardWork()"(overrides?: CallOverrides): Promise<void>;

    emergencyExit(overrides?: CallOverrides): Promise<void>;

    "emergencyExit()"(overrides?: CallOverrides): Promise<void>;

    folds(overrides?: CallOverrides): Promise<BigNumber>;

    "folds()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    investAllUnderlying(overrides?: CallOverrides): Promise<void>;

    "investAllUnderlying()"(overrides?: CallOverrides): Promise<void>;

    investedUnderlyingBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "investedUnderlyingBalance()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationAllowed(overrides?: CallOverrides): Promise<boolean>;

    "liquidationAllowed()"(overrides?: CallOverrides): Promise<boolean>;

    liquidityLoanCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidityLoanCurrent()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityLoanTarget(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidityLoanTarget()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityRecipient(overrides?: CallOverrides): Promise<string>;

    "liquidityRecipient()"(overrides?: CallOverrides): Promise<string>;

    profitSharingDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    "profitSharingDenominator()"(overrides?: CallOverrides): Promise<BigNumber>;

    profitSharingNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "profitSharingNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

    provideLoan(overrides?: CallOverrides): Promise<void>;

    "provideLoan()"(overrides?: CallOverrides): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    "rewardToken()"(overrides?: CallOverrides): Promise<string>;

    salvage(
      recipient: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "salvage(address,address,uint256)"(
      recipient: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sellFloor(overrides?: CallOverrides): Promise<BigNumber>;

    "sellFloor()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAllowLiquidityShortage(
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAllowLiquidityShortage(bool)"(
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBorrowMinThreshold(
      threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBorrowMinThreshold(uint256)"(
      threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralFactorNumerator(
      numerator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCollateralFactorNumerator(uint256)"(
      numerator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFolds(_folds: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setFolds(uint256)"(
      _folds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationAllowed(
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLiquidationAllowed(bool)"(
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityLoanTarget(
      target: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLiquidityLoanTarget(uint256)"(
      target: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityRecipient(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLiquidityRecipient(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSellFloor(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setSellFloor(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStorage(_store: string, overrides?: CallOverrides): Promise<void>;

    "setStorage(address)"(
      _store: string,
      overrides?: CallOverrides
    ): Promise<void>;

    settleLoan(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "settleLoan(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    store(overrides?: CallOverrides): Promise<string>;

    "store()"(overrides?: CallOverrides): Promise<string>;

    suppliedInUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    "suppliedInUnderlying()"(overrides?: CallOverrides): Promise<BigNumber>;

    tenWeth(overrides?: CallOverrides): Promise<BigNumber>;

    "tenWeth()"(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<string>;

    "underlying()"(overrides?: CallOverrides): Promise<string>;

    uniswapRouterV2(overrides?: CallOverrides): Promise<string>;

    "uniswapRouterV2()"(overrides?: CallOverrides): Promise<string>;

    unsalvagableTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "unsalvagableTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vault(overrides?: CallOverrides): Promise<string>;

    "vault()"(overrides?: CallOverrides): Promise<string>;

    withdrawAllToVault(overrides?: CallOverrides): Promise<void>;

    "withdrawAllToVault()"(overrides?: CallOverrides): Promise<void>;

    withdrawToVault(
      amountUnderlying: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawToVault(uint256)"(
      amountUnderlying: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Liquidated(amount: null): EventFilter;

    ProfitLogInReward(
      profitAmount: null,
      feeAmount: null,
      timestamp: null
    ): EventFilter;

    ProfitNotClaimed(): EventFilter;

    TooLowBalance(): EventFilter;
  };

  estimateGas: {
    __comp(overrides?: CallOverrides): Promise<BigNumber>;

    "__comp()"(overrides?: CallOverrides): Promise<BigNumber>;

    __comptroller(overrides?: CallOverrides): Promise<BigNumber>;

    "__comptroller()"(overrides?: CallOverrides): Promise<BigNumber>;

    __ctoken(overrides?: CallOverrides): Promise<BigNumber>;

    "__ctoken()"(overrides?: CallOverrides): Promise<BigNumber>;

    __underlying(overrides?: CallOverrides): Promise<BigNumber>;

    "__underlying()"(overrides?: CallOverrides): Promise<BigNumber>;

    __uniswap(overrides?: CallOverrides): Promise<BigNumber>;

    "__uniswap()"(overrides?: CallOverrides): Promise<BigNumber>;

    _weth(overrides?: CallOverrides): Promise<BigNumber>;

    "_weth()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowEmergencyLiquidityShortage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowEmergencyLiquidityShortage()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowMinThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowMinThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    borrowedInUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowedInUnderlying()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimComp(overrides?: Overrides): Promise<BigNumber>;

    "claimComp()"(overrides?: Overrides): Promise<BigNumber>;

    collateralFactorDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralFactorDenominator()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralFactorNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralFactorNumerator()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    comp(overrides?: CallOverrides): Promise<BigNumber>;

    "comp()"(overrides?: CallOverrides): Promise<BigNumber>;

    comptroller(overrides?: CallOverrides): Promise<BigNumber>;

    "comptroller()"(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    "controller()"(overrides?: CallOverrides): Promise<BigNumber>;

    ctoken(overrides?: CallOverrides): Promise<BigNumber>;

    "ctoken()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositArbCheck(overrides?: CallOverrides): Promise<BigNumber>;

    "depositArbCheck()"(overrides?: CallOverrides): Promise<BigNumber>;

    doHardWork(overrides?: Overrides): Promise<BigNumber>;

    "doHardWork()"(overrides?: Overrides): Promise<BigNumber>;

    emergencyExit(overrides?: Overrides): Promise<BigNumber>;

    "emergencyExit()"(overrides?: Overrides): Promise<BigNumber>;

    folds(overrides?: CallOverrides): Promise<BigNumber>;

    "folds()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    investAllUnderlying(overrides?: Overrides): Promise<BigNumber>;

    "investAllUnderlying()"(overrides?: Overrides): Promise<BigNumber>;

    investedUnderlyingBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "investedUnderlyingBalance()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationAllowed()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityLoanCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidityLoanCurrent()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityLoanTarget(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidityLoanTarget()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidityRecipient()"(overrides?: CallOverrides): Promise<BigNumber>;

    profitSharingDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    "profitSharingDenominator()"(overrides?: CallOverrides): Promise<BigNumber>;

    profitSharingNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "profitSharingNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

    provideLoan(overrides?: Overrides): Promise<BigNumber>;

    "provideLoan()"(overrides?: Overrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    salvage(
      recipient: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "salvage(address,address,uint256)"(
      recipient: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sellFloor(overrides?: CallOverrides): Promise<BigNumber>;

    "sellFloor()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAllowLiquidityShortage(
      allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAllowLiquidityShortage(bool)"(
      allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBorrowMinThreshold(
      threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBorrowMinThreshold(uint256)"(
      threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCollateralFactorNumerator(
      numerator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCollateralFactorNumerator(uint256)"(
      numerator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFolds(_folds: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setFolds(uint256)"(
      _folds: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLiquidationAllowed(
      allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLiquidationAllowed(bool)"(
      allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLiquidityLoanTarget(
      target: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLiquidityLoanTarget(uint256)"(
      target: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLiquidityRecipient(
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLiquidityRecipient(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSellFloor(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSellFloor(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setStorage(_store: string, overrides?: Overrides): Promise<BigNumber>;

    "setStorage(address)"(
      _store: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settleLoan(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "settleLoan(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    store(overrides?: CallOverrides): Promise<BigNumber>;

    "store()"(overrides?: CallOverrides): Promise<BigNumber>;

    suppliedInUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    "suppliedInUnderlying()"(overrides?: CallOverrides): Promise<BigNumber>;

    tenWeth(overrides?: CallOverrides): Promise<BigNumber>;

    "tenWeth()"(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    "underlying()"(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapRouterV2(overrides?: CallOverrides): Promise<BigNumber>;

    "uniswapRouterV2()"(overrides?: CallOverrides): Promise<BigNumber>;

    unsalvagableTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unsalvagableTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    "vault()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAllToVault(overrides?: Overrides): Promise<BigNumber>;

    "withdrawAllToVault()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawToVault(
      amountUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawToVault(uint256)"(
      amountUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __comp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "__comp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __comptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "__comptroller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __ctoken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "__ctoken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "__underlying()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __uniswap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "__uniswap()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowEmergencyLiquidityShortage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowEmergencyLiquidityShortage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowMinThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrowMinThreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowedInUnderlying(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrowedInUnderlying()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimComp(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claimComp()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    collateralFactorDenominator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralFactorDenominator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralFactorNumerator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralFactorNumerator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    comp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "comp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    comptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "comptroller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ctoken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ctoken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositArbCheck(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "depositArbCheck()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    doHardWork(overrides?: Overrides): Promise<PopulatedTransaction>;

    "doHardWork()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    emergencyExit(overrides?: Overrides): Promise<PopulatedTransaction>;

    "emergencyExit()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    folds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "folds()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLiquidity()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    investAllUnderlying(overrides?: Overrides): Promise<PopulatedTransaction>;

    "investAllUnderlying()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    investedUnderlyingBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "investedUnderlyingBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationAllowed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidationAllowed()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityLoanCurrent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidityLoanCurrent()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityLoanTarget(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidityLoanTarget()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityRecipient(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidityRecipient()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    profitSharingDenominator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "profitSharingDenominator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    profitSharingNumerator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "profitSharingNumerator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    provideLoan(overrides?: Overrides): Promise<PopulatedTransaction>;

    "provideLoan()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    salvage(
      recipient: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "salvage(address,address,uint256)"(
      recipient: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sellFloor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sellFloor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAllowLiquidityShortage(
      allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAllowLiquidityShortage(bool)"(
      allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBorrowMinThreshold(
      threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBorrowMinThreshold(uint256)"(
      threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCollateralFactorNumerator(
      numerator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCollateralFactorNumerator(uint256)"(
      numerator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFolds(
      _folds: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFolds(uint256)"(
      _folds: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLiquidationAllowed(
      allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLiquidationAllowed(bool)"(
      allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLiquidityLoanTarget(
      target: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLiquidityLoanTarget(uint256)"(
      target: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLiquidityRecipient(
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLiquidityRecipient(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSellFloor(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSellFloor(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStorage(
      _store: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStorage(address)"(
      _store: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settleLoan(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "settleLoan(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    store(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "store()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    suppliedInUnderlying(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "suppliedInUnderlying()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tenWeth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tenWeth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "underlying()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapRouterV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniswapRouterV2()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unsalvagableTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "unsalvagableTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawAllToVault(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawAllToVault()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawToVault(
      amountUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawToVault(uint256)"(
      amountUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
