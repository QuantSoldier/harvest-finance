/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IVaultInterface extends ethers.utils.Interface {
  functions: {
    "controller()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositFor(uint256,address)": FunctionFragment;
    "doHardWork()": FunctionFragment;
    "getPricePerFullShare()": FunctionFragment;
    "governance()": FunctionFragment;
    "rebalance()": FunctionFragment;
    "setStrategy(address)": FunctionFragment;
    "setVaultFractionToInvest(uint256,uint256)": FunctionFragment;
    "strategy()": FunctionFragment;
    "underlying()": FunctionFragment;
    "underlyingBalanceInVault()": FunctionFragment;
    "underlyingBalanceWithInvestment()": FunctionFragment;
    "underlyingBalanceWithInvestmentForHolder(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "doHardWork",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPricePerFullShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rebalance", values?: undefined): string;
  encodeFunctionData(functionFragment: "setStrategy", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setVaultFractionToInvest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "strategy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingBalanceInVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingBalanceWithInvestment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingBalanceWithInvestmentForHolder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doHardWork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPricePerFullShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultFractionToInvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingBalanceInVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingBalanceWithInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingBalanceWithInvestmentForHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {};
}

export class IVault extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IVaultInterface;

  functions: {
    controller(overrides?: CallOverrides): Promise<[string]>;

    "controller()"(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      amountWei: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      amountWei: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositFor(
      amountWei: BigNumberish,
      holder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositFor(uint256,address)"(
      amountWei: BigNumberish,
      holder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    doHardWork(overrides?: Overrides): Promise<ContractTransaction>;

    "doHardWork()"(overrides?: Overrides): Promise<ContractTransaction>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getPricePerFullShare()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    "governance()"(overrides?: CallOverrides): Promise<[string]>;

    rebalance(overrides?: Overrides): Promise<ContractTransaction>;

    "rebalance()"(overrides?: Overrides): Promise<ContractTransaction>;

    setStrategy(
      _strategy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStrategy(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setVaultFractionToInvest(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVaultFractionToInvest(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    strategy(overrides?: CallOverrides): Promise<[string]>;

    "strategy()"(overrides?: CallOverrides): Promise<[string]>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    "underlying()"(overrides?: CallOverrides): Promise<[string]>;

    underlyingBalanceInVault(overrides?: CallOverrides): Promise<[BigNumber]>;

    "underlyingBalanceInVault()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    underlyingBalanceWithInvestment(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "underlyingBalanceWithInvestment()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    underlyingBalanceWithInvestmentForHolder(
      holder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "underlyingBalanceWithInvestmentForHolder(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      numberOfShares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      numberOfShares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawAll(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawAll()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  controller(overrides?: CallOverrides): Promise<string>;

  "controller()"(overrides?: CallOverrides): Promise<string>;

  deposit(
    amountWei: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    amountWei: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositFor(
    amountWei: BigNumberish,
    holder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositFor(uint256,address)"(
    amountWei: BigNumberish,
    holder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  doHardWork(overrides?: Overrides): Promise<ContractTransaction>;

  "doHardWork()"(overrides?: Overrides): Promise<ContractTransaction>;

  getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

  "getPricePerFullShare()"(overrides?: CallOverrides): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  rebalance(overrides?: Overrides): Promise<ContractTransaction>;

  "rebalance()"(overrides?: Overrides): Promise<ContractTransaction>;

  setStrategy(
    _strategy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStrategy(address)"(
    _strategy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setVaultFractionToInvest(
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVaultFractionToInvest(uint256,uint256)"(
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  strategy(overrides?: CallOverrides): Promise<string>;

  "strategy()"(overrides?: CallOverrides): Promise<string>;

  underlying(overrides?: CallOverrides): Promise<string>;

  "underlying()"(overrides?: CallOverrides): Promise<string>;

  underlyingBalanceInVault(overrides?: CallOverrides): Promise<BigNumber>;

  "underlyingBalanceInVault()"(overrides?: CallOverrides): Promise<BigNumber>;

  underlyingBalanceWithInvestment(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "underlyingBalanceWithInvestment()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  underlyingBalanceWithInvestmentForHolder(
    holder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "underlyingBalanceWithInvestmentForHolder(address)"(
    holder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    numberOfShares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    numberOfShares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawAll(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawAll()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    controller(overrides?: CallOverrides): Promise<string>;

    "controller()"(overrides?: CallOverrides): Promise<string>;

    deposit(amountWei: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "deposit(uint256)"(
      amountWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositFor(
      amountWei: BigNumberish,
      holder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositFor(uint256,address)"(
      amountWei: BigNumberish,
      holder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    doHardWork(overrides?: CallOverrides): Promise<void>;

    "doHardWork()"(overrides?: CallOverrides): Promise<void>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

    "getPricePerFullShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    rebalance(overrides?: CallOverrides): Promise<void>;

    "rebalance()"(overrides?: CallOverrides): Promise<void>;

    setStrategy(_strategy: string, overrides?: CallOverrides): Promise<void>;

    "setStrategy(address)"(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultFractionToInvest(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVaultFractionToInvest(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    strategy(overrides?: CallOverrides): Promise<string>;

    "strategy()"(overrides?: CallOverrides): Promise<string>;

    underlying(overrides?: CallOverrides): Promise<string>;

    "underlying()"(overrides?: CallOverrides): Promise<string>;

    underlyingBalanceInVault(overrides?: CallOverrides): Promise<BigNumber>;

    "underlyingBalanceInVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingBalanceWithInvestment(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "underlyingBalanceWithInvestment()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingBalanceWithInvestmentForHolder(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "underlyingBalanceWithInvestmentForHolder(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      numberOfShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256)"(
      numberOfShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;

    "withdrawAll()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    controller(overrides?: CallOverrides): Promise<BigNumber>;

    "controller()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(amountWei: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "deposit(uint256)"(
      amountWei: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositFor(
      amountWei: BigNumberish,
      holder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositFor(uint256,address)"(
      amountWei: BigNumberish,
      holder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    doHardWork(overrides?: Overrides): Promise<BigNumber>;

    "doHardWork()"(overrides?: Overrides): Promise<BigNumber>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

    "getPricePerFullShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(overrides?: Overrides): Promise<BigNumber>;

    "rebalance()"(overrides?: Overrides): Promise<BigNumber>;

    setStrategy(_strategy: string, overrides?: Overrides): Promise<BigNumber>;

    "setStrategy(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setVaultFractionToInvest(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setVaultFractionToInvest(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    strategy(overrides?: CallOverrides): Promise<BigNumber>;

    "strategy()"(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    "underlying()"(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingBalanceInVault(overrides?: CallOverrides): Promise<BigNumber>;

    "underlyingBalanceInVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingBalanceWithInvestment(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "underlyingBalanceWithInvestment()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingBalanceWithInvestmentForHolder(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "underlyingBalanceWithInvestmentForHolder(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      numberOfShares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      numberOfShares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawAll(overrides?: Overrides): Promise<BigNumber>;

    "withdrawAll()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amountWei: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      amountWei: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositFor(
      amountWei: BigNumberish,
      holder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositFor(uint256,address)"(
      amountWei: BigNumberish,
      holder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    doHardWork(overrides?: Overrides): Promise<PopulatedTransaction>;

    "doHardWork()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getPricePerFullShare(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPricePerFullShare()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalance(overrides?: Overrides): Promise<PopulatedTransaction>;

    "rebalance()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setStrategy(
      _strategy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStrategy(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVaultFractionToInvest(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVaultFractionToInvest(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    strategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "strategy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "underlying()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingBalanceInVault(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "underlyingBalanceInVault()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingBalanceWithInvestment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "underlyingBalanceWithInvestment()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingBalanceWithInvestmentForHolder(
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "underlyingBalanceWithInvestmentForHolder(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      numberOfShares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      numberOfShares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawAll(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawAll()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
