/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IdleStrategyWBTCMainnetInterface extends ethers.utils.Interface {
  functions: {
    "__comp()": FunctionFragment;
    "__idle()": FunctionFragment;
    "__idleUnderlying()": FunctionFragment;
    "__uniswap()": FunctionFragment;
    "__wbtc()": FunctionFragment;
    "__weth()": FunctionFragment;
    "claimAllowed()": FunctionFragment;
    "comp()": FunctionFragment;
    "controller()": FunctionFragment;
    "depositArbCheck()": FunctionFragment;
    "doHardWork()": FunctionFragment;
    "governance()": FunctionFragment;
    "idle()": FunctionFragment;
    "idleUnderlying()": FunctionFragment;
    "investAllUnderlying()": FunctionFragment;
    "investedUnderlyingBalance()": FunctionFragment;
    "profitSharingDenominator()": FunctionFragment;
    "profitSharingNumerator()": FunctionFragment;
    "protected()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "salvage(address,address,uint256)": FunctionFragment;
    "sellComp()": FunctionFragment;
    "sellIdle()": FunctionFragment;
    "setLiquidation(bool,bool,bool)": FunctionFragment;
    "setProtected(bool)": FunctionFragment;
    "setStorage(address)": FunctionFragment;
    "store()": FunctionFragment;
    "underlying()": FunctionFragment;
    "uniswapComp(uint256)": FunctionFragment;
    "uniswapIdle(uint256)": FunctionFragment;
    "uniswapRouterV2()": FunctionFragment;
    "unsalvagableTokens(address)": FunctionFragment;
    "vault()": FunctionFragment;
    "virtualPrice()": FunctionFragment;
    "withdrawAllToVault()": FunctionFragment;
    "withdrawToVault(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "__comp", values?: undefined): string;
  encodeFunctionData(functionFragment: "__idle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "__idleUnderlying",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "__uniswap", values?: undefined): string;
  encodeFunctionData(functionFragment: "__wbtc", values?: undefined): string;
  encodeFunctionData(functionFragment: "__weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "comp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositArbCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "doHardWork",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "idle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "idleUnderlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investAllUnderlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investedUnderlyingBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "profitSharingDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "profitSharingNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "protected", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "salvage",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sellComp", values?: undefined): string;
  encodeFunctionData(functionFragment: "sellIdle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setLiquidation",
    values: [boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtected",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setStorage", values: [string]): string;
  encodeFunctionData(functionFragment: "store", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapComp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapIdle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapRouterV2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unsalvagableTokens",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "virtualPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllToVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToVault",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "__comp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "__idle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__idleUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "__uniswap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "__wbtc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "__weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "comp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositArbCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "doHardWork", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "idle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "idleUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investAllUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investedUnderlyingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "profitSharingDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "profitSharingNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protected", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "salvage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellComp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellIdle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStorage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapComp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapIdle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapRouterV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsalvagableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "virtualPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToVault",
    data: BytesLike
  ): Result;

  events: {
    "Liquidating(address,uint256)": EventFragment;
    "ProfitLogInReward(uint256,uint256,uint256)": EventFragment;
    "ProfitsNotCollected(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Liquidating"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfitLogInReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfitsNotCollected"): EventFragment;
}

export class IdleStrategyWBTCMainnet extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IdleStrategyWBTCMainnetInterface;

  functions: {
    __comp(overrides?: CallOverrides): Promise<[string]>;

    "__comp()"(overrides?: CallOverrides): Promise<[string]>;

    __idle(overrides?: CallOverrides): Promise<[string]>;

    "__idle()"(overrides?: CallOverrides): Promise<[string]>;

    __idleUnderlying(overrides?: CallOverrides): Promise<[string]>;

    "__idleUnderlying()"(overrides?: CallOverrides): Promise<[string]>;

    __uniswap(overrides?: CallOverrides): Promise<[string]>;

    "__uniswap()"(overrides?: CallOverrides): Promise<[string]>;

    __wbtc(overrides?: CallOverrides): Promise<[string]>;

    "__wbtc()"(overrides?: CallOverrides): Promise<[string]>;

    __weth(overrides?: CallOverrides): Promise<[string]>;

    "__weth()"(overrides?: CallOverrides): Promise<[string]>;

    claimAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    "claimAllowed()"(overrides?: CallOverrides): Promise<[boolean]>;

    comp(overrides?: CallOverrides): Promise<[string]>;

    "comp()"(overrides?: CallOverrides): Promise<[string]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    "controller()"(overrides?: CallOverrides): Promise<[string]>;

    depositArbCheck(overrides?: CallOverrides): Promise<[boolean]>;

    "depositArbCheck()"(overrides?: CallOverrides): Promise<[boolean]>;

    doHardWork(overrides?: Overrides): Promise<ContractTransaction>;

    "doHardWork()"(overrides?: Overrides): Promise<ContractTransaction>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    "governance()"(overrides?: CallOverrides): Promise<[string]>;

    idle(overrides?: CallOverrides): Promise<[string]>;

    "idle()"(overrides?: CallOverrides): Promise<[string]>;

    idleUnderlying(overrides?: CallOverrides): Promise<[string]>;

    "idleUnderlying()"(overrides?: CallOverrides): Promise<[string]>;

    investAllUnderlying(overrides?: Overrides): Promise<ContractTransaction>;

    "investAllUnderlying()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    investedUnderlyingBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "investedUnderlyingBalance()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    profitSharingDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    "profitSharingDenominator()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    profitSharingNumerator(overrides?: CallOverrides): Promise<[BigNumber]>;

    "profitSharingNumerator()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    protected(overrides?: CallOverrides): Promise<[boolean]>;

    "protected()"(overrides?: CallOverrides): Promise<[boolean]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    "rewardToken()"(overrides?: CallOverrides): Promise<[string]>;

    salvage(
      recipient: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "salvage(address,address,uint256)"(
      recipient: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sellComp(overrides?: CallOverrides): Promise<[boolean]>;

    "sellComp()"(overrides?: CallOverrides): Promise<[boolean]>;

    sellIdle(overrides?: CallOverrides): Promise<[boolean]>;

    "sellIdle()"(overrides?: CallOverrides): Promise<[boolean]>;

    setLiquidation(
      _sellComp: boolean,
      _sellIdle: boolean,
      _claimAllowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLiquidation(bool,bool,bool)"(
      _sellComp: boolean,
      _sellIdle: boolean,
      _claimAllowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setProtected(
      _protected: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setProtected(bool)"(
      _protected: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStorage(
      _store: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStorage(address)"(
      _store: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    store(overrides?: CallOverrides): Promise<[string]>;

    "store()"(overrides?: CallOverrides): Promise<[string]>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    "underlying()"(overrides?: CallOverrides): Promise<[string]>;

    uniswapComp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "uniswapComp(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    uniswapIdle(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "uniswapIdle(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    uniswapRouterV2(overrides?: CallOverrides): Promise<[string]>;

    "uniswapRouterV2()"(overrides?: CallOverrides): Promise<[string]>;

    unsalvagableTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "unsalvagableTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    "vault()"(overrides?: CallOverrides): Promise<[string]>;

    virtualPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "virtualPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawAllToVault(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawAllToVault()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawToVault(
      amountUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawToVault(uint256)"(
      amountUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  __comp(overrides?: CallOverrides): Promise<string>;

  "__comp()"(overrides?: CallOverrides): Promise<string>;

  __idle(overrides?: CallOverrides): Promise<string>;

  "__idle()"(overrides?: CallOverrides): Promise<string>;

  __idleUnderlying(overrides?: CallOverrides): Promise<string>;

  "__idleUnderlying()"(overrides?: CallOverrides): Promise<string>;

  __uniswap(overrides?: CallOverrides): Promise<string>;

  "__uniswap()"(overrides?: CallOverrides): Promise<string>;

  __wbtc(overrides?: CallOverrides): Promise<string>;

  "__wbtc()"(overrides?: CallOverrides): Promise<string>;

  __weth(overrides?: CallOverrides): Promise<string>;

  "__weth()"(overrides?: CallOverrides): Promise<string>;

  claimAllowed(overrides?: CallOverrides): Promise<boolean>;

  "claimAllowed()"(overrides?: CallOverrides): Promise<boolean>;

  comp(overrides?: CallOverrides): Promise<string>;

  "comp()"(overrides?: CallOverrides): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  "controller()"(overrides?: CallOverrides): Promise<string>;

  depositArbCheck(overrides?: CallOverrides): Promise<boolean>;

  "depositArbCheck()"(overrides?: CallOverrides): Promise<boolean>;

  doHardWork(overrides?: Overrides): Promise<ContractTransaction>;

  "doHardWork()"(overrides?: Overrides): Promise<ContractTransaction>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  idle(overrides?: CallOverrides): Promise<string>;

  "idle()"(overrides?: CallOverrides): Promise<string>;

  idleUnderlying(overrides?: CallOverrides): Promise<string>;

  "idleUnderlying()"(overrides?: CallOverrides): Promise<string>;

  investAllUnderlying(overrides?: Overrides): Promise<ContractTransaction>;

  "investAllUnderlying()"(overrides?: Overrides): Promise<ContractTransaction>;

  investedUnderlyingBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "investedUnderlyingBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  profitSharingDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  "profitSharingDenominator()"(overrides?: CallOverrides): Promise<BigNumber>;

  profitSharingNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  "profitSharingNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

  protected(overrides?: CallOverrides): Promise<boolean>;

  "protected()"(overrides?: CallOverrides): Promise<boolean>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  "rewardToken()"(overrides?: CallOverrides): Promise<string>;

  salvage(
    recipient: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "salvage(address,address,uint256)"(
    recipient: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sellComp(overrides?: CallOverrides): Promise<boolean>;

  "sellComp()"(overrides?: CallOverrides): Promise<boolean>;

  sellIdle(overrides?: CallOverrides): Promise<boolean>;

  "sellIdle()"(overrides?: CallOverrides): Promise<boolean>;

  setLiquidation(
    _sellComp: boolean,
    _sellIdle: boolean,
    _claimAllowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLiquidation(bool,bool,bool)"(
    _sellComp: boolean,
    _sellIdle: boolean,
    _claimAllowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setProtected(
    _protected: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setProtected(bool)"(
    _protected: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStorage(
    _store: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStorage(address)"(
    _store: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  store(overrides?: CallOverrides): Promise<string>;

  "store()"(overrides?: CallOverrides): Promise<string>;

  underlying(overrides?: CallOverrides): Promise<string>;

  "underlying()"(overrides?: CallOverrides): Promise<string>;

  uniswapComp(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "uniswapComp(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  uniswapIdle(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "uniswapIdle(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  uniswapRouterV2(overrides?: CallOverrides): Promise<string>;

  "uniswapRouterV2()"(overrides?: CallOverrides): Promise<string>;

  unsalvagableTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "unsalvagableTokens(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  vault(overrides?: CallOverrides): Promise<string>;

  "vault()"(overrides?: CallOverrides): Promise<string>;

  virtualPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "virtualPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawAllToVault(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawAllToVault()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawToVault(
    amountUnderlying: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawToVault(uint256)"(
    amountUnderlying: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    __comp(overrides?: CallOverrides): Promise<string>;

    "__comp()"(overrides?: CallOverrides): Promise<string>;

    __idle(overrides?: CallOverrides): Promise<string>;

    "__idle()"(overrides?: CallOverrides): Promise<string>;

    __idleUnderlying(overrides?: CallOverrides): Promise<string>;

    "__idleUnderlying()"(overrides?: CallOverrides): Promise<string>;

    __uniswap(overrides?: CallOverrides): Promise<string>;

    "__uniswap()"(overrides?: CallOverrides): Promise<string>;

    __wbtc(overrides?: CallOverrides): Promise<string>;

    "__wbtc()"(overrides?: CallOverrides): Promise<string>;

    __weth(overrides?: CallOverrides): Promise<string>;

    "__weth()"(overrides?: CallOverrides): Promise<string>;

    claimAllowed(overrides?: CallOverrides): Promise<boolean>;

    "claimAllowed()"(overrides?: CallOverrides): Promise<boolean>;

    comp(overrides?: CallOverrides): Promise<string>;

    "comp()"(overrides?: CallOverrides): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    "controller()"(overrides?: CallOverrides): Promise<string>;

    depositArbCheck(overrides?: CallOverrides): Promise<boolean>;

    "depositArbCheck()"(overrides?: CallOverrides): Promise<boolean>;

    doHardWork(overrides?: CallOverrides): Promise<void>;

    "doHardWork()"(overrides?: CallOverrides): Promise<void>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    idle(overrides?: CallOverrides): Promise<string>;

    "idle()"(overrides?: CallOverrides): Promise<string>;

    idleUnderlying(overrides?: CallOverrides): Promise<string>;

    "idleUnderlying()"(overrides?: CallOverrides): Promise<string>;

    investAllUnderlying(overrides?: CallOverrides): Promise<void>;

    "investAllUnderlying()"(overrides?: CallOverrides): Promise<void>;

    investedUnderlyingBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "investedUnderlyingBalance()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    profitSharingDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    "profitSharingDenominator()"(overrides?: CallOverrides): Promise<BigNumber>;

    profitSharingNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "profitSharingNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

    protected(overrides?: CallOverrides): Promise<boolean>;

    "protected()"(overrides?: CallOverrides): Promise<boolean>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    "rewardToken()"(overrides?: CallOverrides): Promise<string>;

    salvage(
      recipient: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "salvage(address,address,uint256)"(
      recipient: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sellComp(overrides?: CallOverrides): Promise<boolean>;

    "sellComp()"(overrides?: CallOverrides): Promise<boolean>;

    sellIdle(overrides?: CallOverrides): Promise<boolean>;

    "sellIdle()"(overrides?: CallOverrides): Promise<boolean>;

    setLiquidation(
      _sellComp: boolean,
      _sellIdle: boolean,
      _claimAllowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLiquidation(bool,bool,bool)"(
      _sellComp: boolean,
      _sellIdle: boolean,
      _claimAllowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtected(_protected: boolean, overrides?: CallOverrides): Promise<void>;

    "setProtected(bool)"(
      _protected: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setStorage(_store: string, overrides?: CallOverrides): Promise<void>;

    "setStorage(address)"(
      _store: string,
      overrides?: CallOverrides
    ): Promise<void>;

    store(overrides?: CallOverrides): Promise<string>;

    "store()"(overrides?: CallOverrides): Promise<string>;

    underlying(overrides?: CallOverrides): Promise<string>;

    "underlying()"(overrides?: CallOverrides): Promise<string>;

    uniswapComp(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "uniswapComp(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    uniswapIdle(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "uniswapIdle(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    uniswapRouterV2(overrides?: CallOverrides): Promise<string>;

    "uniswapRouterV2()"(overrides?: CallOverrides): Promise<string>;

    unsalvagableTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "unsalvagableTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vault(overrides?: CallOverrides): Promise<string>;

    "vault()"(overrides?: CallOverrides): Promise<string>;

    virtualPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "virtualPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAllToVault(overrides?: CallOverrides): Promise<void>;

    "withdrawAllToVault()"(overrides?: CallOverrides): Promise<void>;

    withdrawToVault(
      amountUnderlying: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawToVault(uint256)"(
      amountUnderlying: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Liquidating(undefined: null, undefined: null): EventFilter;

    ProfitLogInReward(
      profitAmount: null,
      feeAmount: null,
      timestamp: null
    ): EventFilter;

    ProfitsNotCollected(undefined: null): EventFilter;
  };

  estimateGas: {
    __comp(overrides?: CallOverrides): Promise<BigNumber>;

    "__comp()"(overrides?: CallOverrides): Promise<BigNumber>;

    __idle(overrides?: CallOverrides): Promise<BigNumber>;

    "__idle()"(overrides?: CallOverrides): Promise<BigNumber>;

    __idleUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    "__idleUnderlying()"(overrides?: CallOverrides): Promise<BigNumber>;

    __uniswap(overrides?: CallOverrides): Promise<BigNumber>;

    "__uniswap()"(overrides?: CallOverrides): Promise<BigNumber>;

    __wbtc(overrides?: CallOverrides): Promise<BigNumber>;

    "__wbtc()"(overrides?: CallOverrides): Promise<BigNumber>;

    __weth(overrides?: CallOverrides): Promise<BigNumber>;

    "__weth()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    "claimAllowed()"(overrides?: CallOverrides): Promise<BigNumber>;

    comp(overrides?: CallOverrides): Promise<BigNumber>;

    "comp()"(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    "controller()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositArbCheck(overrides?: CallOverrides): Promise<BigNumber>;

    "depositArbCheck()"(overrides?: CallOverrides): Promise<BigNumber>;

    doHardWork(overrides?: Overrides): Promise<BigNumber>;

    "doHardWork()"(overrides?: Overrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    idle(overrides?: CallOverrides): Promise<BigNumber>;

    "idle()"(overrides?: CallOverrides): Promise<BigNumber>;

    idleUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    "idleUnderlying()"(overrides?: CallOverrides): Promise<BigNumber>;

    investAllUnderlying(overrides?: Overrides): Promise<BigNumber>;

    "investAllUnderlying()"(overrides?: Overrides): Promise<BigNumber>;

    investedUnderlyingBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "investedUnderlyingBalance()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    profitSharingDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    "profitSharingDenominator()"(overrides?: CallOverrides): Promise<BigNumber>;

    profitSharingNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "profitSharingNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

    protected(overrides?: CallOverrides): Promise<BigNumber>;

    "protected()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    salvage(
      recipient: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "salvage(address,address,uint256)"(
      recipient: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sellComp(overrides?: CallOverrides): Promise<BigNumber>;

    "sellComp()"(overrides?: CallOverrides): Promise<BigNumber>;

    sellIdle(overrides?: CallOverrides): Promise<BigNumber>;

    "sellIdle()"(overrides?: CallOverrides): Promise<BigNumber>;

    setLiquidation(
      _sellComp: boolean,
      _sellIdle: boolean,
      _claimAllowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLiquidation(bool,bool,bool)"(
      _sellComp: boolean,
      _sellIdle: boolean,
      _claimAllowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setProtected(
      _protected: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setProtected(bool)"(
      _protected: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setStorage(_store: string, overrides?: Overrides): Promise<BigNumber>;

    "setStorage(address)"(
      _store: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    store(overrides?: CallOverrides): Promise<BigNumber>;

    "store()"(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    "underlying()"(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapComp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "uniswapComp(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniswapIdle(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "uniswapIdle(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniswapRouterV2(overrides?: CallOverrides): Promise<BigNumber>;

    "uniswapRouterV2()"(overrides?: CallOverrides): Promise<BigNumber>;

    unsalvagableTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unsalvagableTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    "vault()"(overrides?: CallOverrides): Promise<BigNumber>;

    virtualPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "virtualPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAllToVault(overrides?: Overrides): Promise<BigNumber>;

    "withdrawAllToVault()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawToVault(
      amountUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawToVault(uint256)"(
      amountUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __comp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "__comp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __idle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "__idle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __idleUnderlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "__idleUnderlying()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __uniswap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "__uniswap()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __wbtc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "__wbtc()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "__weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimAllowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "claimAllowed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    comp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "comp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositArbCheck(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "depositArbCheck()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    doHardWork(overrides?: Overrides): Promise<PopulatedTransaction>;

    "doHardWork()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    idle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "idle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    idleUnderlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "idleUnderlying()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    investAllUnderlying(overrides?: Overrides): Promise<PopulatedTransaction>;

    "investAllUnderlying()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    investedUnderlyingBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "investedUnderlyingBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    profitSharingDenominator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "profitSharingDenominator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    profitSharingNumerator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "profitSharingNumerator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protected(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protected()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    salvage(
      recipient: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "salvage(address,address,uint256)"(
      recipient: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sellComp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sellComp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellIdle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sellIdle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setLiquidation(
      _sellComp: boolean,
      _sellIdle: boolean,
      _claimAllowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLiquidation(bool,bool,bool)"(
      _sellComp: boolean,
      _sellIdle: boolean,
      _claimAllowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setProtected(
      _protected: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setProtected(bool)"(
      _protected: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStorage(
      _store: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStorage(address)"(
      _store: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    store(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "store()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "underlying()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapComp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uniswapComp(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniswapIdle(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uniswapIdle(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniswapRouterV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniswapRouterV2()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unsalvagableTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "unsalvagableTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    virtualPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "virtualPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawAllToVault(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawAllToVault()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawToVault(
      amountUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawToVault(uint256)"(
      amountUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
