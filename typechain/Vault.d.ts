/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface VaultInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "announceStrategyUpdate(address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "availableToInvestOut()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "canUpdateStrategy(address)": FunctionFragment;
    "controller()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositFor(uint256,address)": FunctionFragment;
    "doHardWork()": FunctionFragment;
    "finalizeStrategyUpdate()": FunctionFragment;
    "finalizeUpgrade()": FunctionFragment;
    "futureStrategy()": FunctionFragment;
    "getPricePerFullShare()": FunctionFragment;
    "governance()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(string,string,uint8)": FunctionFragment;
    "initializeVault(address,address,uint256,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nextImplementation()": FunctionFragment;
    "nextImplementationDelay()": FunctionFragment;
    "nextImplementationTimestamp()": FunctionFragment;
    "rebalance()": FunctionFragment;
    "scheduleUpgrade(address)": FunctionFragment;
    "setStorage(address)": FunctionFragment;
    "setStrategy(address)": FunctionFragment;
    "setVaultFractionToInvest(uint256,uint256)": FunctionFragment;
    "shouldUpgrade()": FunctionFragment;
    "strategy()": FunctionFragment;
    "strategyTimeLock()": FunctionFragment;
    "strategyUpdateTime()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "underlying()": FunctionFragment;
    "underlyingBalanceInVault()": FunctionFragment;
    "underlyingBalanceWithInvestment()": FunctionFragment;
    "underlyingBalanceWithInvestmentForHolder(address)": FunctionFragment;
    "underlyingUnit()": FunctionFragment;
    "vaultFractionToInvestDenominator()": FunctionFragment;
    "vaultFractionToInvestNumerator()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "announceStrategyUpdate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "availableToInvestOut",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "canUpdateStrategy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "doHardWork",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeStrategyUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "futureStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPricePerFullShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeVault",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextImplementationDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextImplementationTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rebalance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "scheduleUpgrade",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setStorage", values: [string]): string;
  encodeFunctionData(functionFragment: "setStrategy", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setVaultFractionToInvest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "strategy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "strategyTimeLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strategyUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingBalanceInVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingBalanceWithInvestment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingBalanceWithInvestmentForHolder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingUnit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultFractionToInvestDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultFractionToInvestNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "announceStrategyUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableToInvestOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canUpdateStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doHardWork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeStrategyUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "futureStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPricePerFullShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextImplementationDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextImplementationTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "scheduleUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStorage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultFractionToInvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "strategyTimeLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingBalanceInVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingBalanceWithInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingBalanceWithInvestmentForHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultFractionToInvestDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultFractionToInvestNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "Invest(uint256)": EventFragment;
    "StrategyAnnounced(address,uint256)": EventFragment;
    "StrategyChanged(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Invest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyAnnounced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class Vault extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: VaultInterface;

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    announceStrategyUpdate(
      _strategy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "announceStrategyUpdate(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    availableToInvestOut(overrides?: CallOverrides): Promise<[BigNumber]>;

    "availableToInvestOut()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canUpdateStrategy(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canUpdateStrategy(address)"(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    "controller()"(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositFor(
      amount: BigNumberish,
      holder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositFor(uint256,address)"(
      amount: BigNumberish,
      holder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    doHardWork(overrides?: Overrides): Promise<ContractTransaction>;

    "doHardWork()"(overrides?: Overrides): Promise<ContractTransaction>;

    finalizeStrategyUpdate(overrides?: Overrides): Promise<ContractTransaction>;

    "finalizeStrategyUpdate()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    finalizeUpgrade(overrides?: Overrides): Promise<ContractTransaction>;

    "finalizeUpgrade()"(overrides?: Overrides): Promise<ContractTransaction>;

    futureStrategy(overrides?: CallOverrides): Promise<[string]>;

    "futureStrategy()"(overrides?: CallOverrides): Promise<[string]>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getPricePerFullShare()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    "governance()"(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(string,string,uint8)"(
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,uint256,uint256,uint256,uint256,uint256)"(
      _underlying: string,
      _toInvestNumerator: BigNumberish,
      _toInvestDenominator: BigNumberish,
      _underlyingUnit: BigNumberish,
      _implementationChangeDelay: BigNumberish,
      _strategyChangeDelay: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _storage: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initializeVault(
      _storage: string,
      _underlying: string,
      _toInvestNumerator: BigNumberish,
      _toInvestDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initializeVault(address,address,uint256,uint256)"(
      _storage: string,
      _underlying: string,
      _toInvestNumerator: BigNumberish,
      _toInvestDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    nextImplementation(overrides?: CallOverrides): Promise<[string]>;

    "nextImplementation()"(overrides?: CallOverrides): Promise<[string]>;

    nextImplementationDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextImplementationDelay()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nextImplementationTimestamp(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "nextImplementationTimestamp()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rebalance(overrides?: Overrides): Promise<ContractTransaction>;

    "rebalance()"(overrides?: Overrides): Promise<ContractTransaction>;

    scheduleUpgrade(
      impl: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "scheduleUpgrade(address)"(
      impl: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStorage(
      _store: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStorage(address)"(
      _store: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStrategy(
      _strategy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStrategy(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setVaultFractionToInvest(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVaultFractionToInvest(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shouldUpgrade(overrides?: CallOverrides): Promise<[boolean, string]>;

    "shouldUpgrade()"(overrides?: CallOverrides): Promise<[boolean, string]>;

    strategy(overrides?: CallOverrides): Promise<[string]>;

    "strategy()"(overrides?: CallOverrides): Promise<[string]>;

    strategyTimeLock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "strategyTimeLock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    strategyUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "strategyUpdateTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    "underlying()"(overrides?: CallOverrides): Promise<[string]>;

    underlyingBalanceInVault(overrides?: CallOverrides): Promise<[BigNumber]>;

    "underlyingBalanceInVault()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    underlyingBalanceWithInvestment(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "underlyingBalanceWithInvestment()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    underlyingBalanceWithInvestmentForHolder(
      holder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "underlyingBalanceWithInvestmentForHolder(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    underlyingUnit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "underlyingUnit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    vaultFractionToInvestDenominator(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "vaultFractionToInvestDenominator()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultFractionToInvestNumerator(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "vaultFractionToInvestNumerator()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      numberOfShares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      numberOfShares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawAll(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawAll()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  announceStrategyUpdate(
    _strategy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "announceStrategyUpdate(address)"(
    _strategy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  availableToInvestOut(overrides?: CallOverrides): Promise<BigNumber>;

  "availableToInvestOut()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canUpdateStrategy(
    _strategy: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canUpdateStrategy(address)"(
    _strategy: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  controller(overrides?: CallOverrides): Promise<string>;

  "controller()"(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositFor(
    amount: BigNumberish,
    holder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositFor(uint256,address)"(
    amount: BigNumberish,
    holder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  doHardWork(overrides?: Overrides): Promise<ContractTransaction>;

  "doHardWork()"(overrides?: Overrides): Promise<ContractTransaction>;

  finalizeStrategyUpdate(overrides?: Overrides): Promise<ContractTransaction>;

  "finalizeStrategyUpdate()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  finalizeUpgrade(overrides?: Overrides): Promise<ContractTransaction>;

  "finalizeUpgrade()"(overrides?: Overrides): Promise<ContractTransaction>;

  futureStrategy(overrides?: CallOverrides): Promise<string>;

  "futureStrategy()"(overrides?: CallOverrides): Promise<string>;

  getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

  "getPricePerFullShare()"(overrides?: CallOverrides): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(string,string,uint8)"(
    name: string,
    symbol: string,
    decimals: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,uint256,uint256,uint256,uint256,uint256)"(
    _underlying: string,
    _toInvestNumerator: BigNumberish,
    _toInvestDenominator: BigNumberish,
    _underlyingUnit: BigNumberish,
    _implementationChangeDelay: BigNumberish,
    _strategyChangeDelay: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _storage: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initializeVault(
    _storage: string,
    _underlying: string,
    _toInvestNumerator: BigNumberish,
    _toInvestDenominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initializeVault(address,address,uint256,uint256)"(
    _storage: string,
    _underlying: string,
    _toInvestNumerator: BigNumberish,
    _toInvestDenominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nextImplementation(overrides?: CallOverrides): Promise<string>;

  "nextImplementation()"(overrides?: CallOverrides): Promise<string>;

  nextImplementationDelay(overrides?: CallOverrides): Promise<BigNumber>;

  "nextImplementationDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

  nextImplementationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "nextImplementationTimestamp()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rebalance(overrides?: Overrides): Promise<ContractTransaction>;

  "rebalance()"(overrides?: Overrides): Promise<ContractTransaction>;

  scheduleUpgrade(
    impl: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "scheduleUpgrade(address)"(
    impl: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStorage(
    _store: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStorage(address)"(
    _store: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStrategy(
    _strategy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStrategy(address)"(
    _strategy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setVaultFractionToInvest(
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVaultFractionToInvest(uint256,uint256)"(
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shouldUpgrade(overrides?: CallOverrides): Promise<[boolean, string]>;

  "shouldUpgrade()"(overrides?: CallOverrides): Promise<[boolean, string]>;

  strategy(overrides?: CallOverrides): Promise<string>;

  "strategy()"(overrides?: CallOverrides): Promise<string>;

  strategyTimeLock(overrides?: CallOverrides): Promise<BigNumber>;

  "strategyTimeLock()"(overrides?: CallOverrides): Promise<BigNumber>;

  strategyUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  "strategyUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  "underlying()"(overrides?: CallOverrides): Promise<string>;

  underlyingBalanceInVault(overrides?: CallOverrides): Promise<BigNumber>;

  "underlyingBalanceInVault()"(overrides?: CallOverrides): Promise<BigNumber>;

  underlyingBalanceWithInvestment(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "underlyingBalanceWithInvestment()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  underlyingBalanceWithInvestmentForHolder(
    holder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "underlyingBalanceWithInvestmentForHolder(address)"(
    holder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  underlyingUnit(overrides?: CallOverrides): Promise<BigNumber>;

  "underlyingUnit()"(overrides?: CallOverrides): Promise<BigNumber>;

  vaultFractionToInvestDenominator(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "vaultFractionToInvestDenominator()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vaultFractionToInvestNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  "vaultFractionToInvestNumerator()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    numberOfShares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    numberOfShares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawAll(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawAll()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    announceStrategyUpdate(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "announceStrategyUpdate(address)"(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    availableToInvestOut(overrides?: CallOverrides): Promise<BigNumber>;

    "availableToInvestOut()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canUpdateStrategy(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canUpdateStrategy(address)"(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    controller(overrides?: CallOverrides): Promise<string>;

    "controller()"(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositFor(
      amount: BigNumberish,
      holder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositFor(uint256,address)"(
      amount: BigNumberish,
      holder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    doHardWork(overrides?: CallOverrides): Promise<void>;

    "doHardWork()"(overrides?: CallOverrides): Promise<void>;

    finalizeStrategyUpdate(overrides?: CallOverrides): Promise<void>;

    "finalizeStrategyUpdate()"(overrides?: CallOverrides): Promise<void>;

    finalizeUpgrade(overrides?: CallOverrides): Promise<void>;

    "finalizeUpgrade()"(overrides?: CallOverrides): Promise<void>;

    futureStrategy(overrides?: CallOverrides): Promise<string>;

    "futureStrategy()"(overrides?: CallOverrides): Promise<string>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

    "getPricePerFullShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "initialize(string,string,uint8)"(
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,uint256,uint256,uint256,uint256,uint256)"(
      _underlying: string,
      _toInvestNumerator: BigNumberish,
      _toInvestDenominator: BigNumberish,
      _underlyingUnit: BigNumberish,
      _implementationChangeDelay: BigNumberish,
      _strategyChangeDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      _storage: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeVault(
      _storage: string,
      _underlying: string,
      _toInvestNumerator: BigNumberish,
      _toInvestDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initializeVault(address,address,uint256,uint256)"(
      _storage: string,
      _underlying: string,
      _toInvestNumerator: BigNumberish,
      _toInvestDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nextImplementation(overrides?: CallOverrides): Promise<string>;

    "nextImplementation()"(overrides?: CallOverrides): Promise<string>;

    nextImplementationDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "nextImplementationDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextImplementationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "nextImplementationTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebalance(overrides?: CallOverrides): Promise<void>;

    "rebalance()"(overrides?: CallOverrides): Promise<void>;

    scheduleUpgrade(impl: string, overrides?: CallOverrides): Promise<void>;

    "scheduleUpgrade(address)"(
      impl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStorage(_store: string, overrides?: CallOverrides): Promise<void>;

    "setStorage(address)"(
      _store: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategy(_strategy: string, overrides?: CallOverrides): Promise<void>;

    "setStrategy(address)"(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultFractionToInvest(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVaultFractionToInvest(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shouldUpgrade(overrides?: CallOverrides): Promise<[boolean, string]>;

    "shouldUpgrade()"(overrides?: CallOverrides): Promise<[boolean, string]>;

    strategy(overrides?: CallOverrides): Promise<string>;

    "strategy()"(overrides?: CallOverrides): Promise<string>;

    strategyTimeLock(overrides?: CallOverrides): Promise<BigNumber>;

    "strategyTimeLock()"(overrides?: CallOverrides): Promise<BigNumber>;

    strategyUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    "strategyUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    underlying(overrides?: CallOverrides): Promise<string>;

    "underlying()"(overrides?: CallOverrides): Promise<string>;

    underlyingBalanceInVault(overrides?: CallOverrides): Promise<BigNumber>;

    "underlyingBalanceInVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingBalanceWithInvestment(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "underlyingBalanceWithInvestment()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingBalanceWithInvestmentForHolder(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "underlyingBalanceWithInvestmentForHolder(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingUnit(overrides?: CallOverrides): Promise<BigNumber>;

    "underlyingUnit()"(overrides?: CallOverrides): Promise<BigNumber>;

    vaultFractionToInvestDenominator(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vaultFractionToInvestDenominator()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultFractionToInvestNumerator(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vaultFractionToInvestNumerator()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      numberOfShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256)"(
      numberOfShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;

    "withdrawAll()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    Deposit(beneficiary: string | null, amount: null): EventFilter;

    Invest(amount: null): EventFilter;

    StrategyAnnounced(newStrategy: null, time: null): EventFilter;

    StrategyChanged(newStrategy: null, oldStrategy: null): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    Withdraw(beneficiary: string | null, amount: null): EventFilter;
  };

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    announceStrategyUpdate(
      _strategy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "announceStrategyUpdate(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    availableToInvestOut(overrides?: CallOverrides): Promise<BigNumber>;

    "availableToInvestOut()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canUpdateStrategy(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canUpdateStrategy(address)"(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    "controller()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositFor(
      amount: BigNumberish,
      holder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositFor(uint256,address)"(
      amount: BigNumberish,
      holder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    doHardWork(overrides?: Overrides): Promise<BigNumber>;

    "doHardWork()"(overrides?: Overrides): Promise<BigNumber>;

    finalizeStrategyUpdate(overrides?: Overrides): Promise<BigNumber>;

    "finalizeStrategyUpdate()"(overrides?: Overrides): Promise<BigNumber>;

    finalizeUpgrade(overrides?: Overrides): Promise<BigNumber>;

    "finalizeUpgrade()"(overrides?: Overrides): Promise<BigNumber>;

    futureStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    "futureStrategy()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

    "getPricePerFullShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(string,string,uint8)"(
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,uint256,uint256,uint256,uint256,uint256)"(
      _underlying: string,
      _toInvestNumerator: BigNumberish,
      _toInvestDenominator: BigNumberish,
      _underlyingUnit: BigNumberish,
      _implementationChangeDelay: BigNumberish,
      _strategyChangeDelay: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address)"(
      _storage: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initializeVault(
      _storage: string,
      _underlying: string,
      _toInvestNumerator: BigNumberish,
      _toInvestDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initializeVault(address,address,uint256,uint256)"(
      _storage: string,
      _underlying: string,
      _toInvestNumerator: BigNumberish,
      _toInvestDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    "nextImplementation()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextImplementationDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "nextImplementationDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextImplementationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "nextImplementationTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebalance(overrides?: Overrides): Promise<BigNumber>;

    "rebalance()"(overrides?: Overrides): Promise<BigNumber>;

    scheduleUpgrade(impl: string, overrides?: Overrides): Promise<BigNumber>;

    "scheduleUpgrade(address)"(
      impl: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setStorage(_store: string, overrides?: Overrides): Promise<BigNumber>;

    "setStorage(address)"(
      _store: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setStrategy(_strategy: string, overrides?: Overrides): Promise<BigNumber>;

    "setStrategy(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setVaultFractionToInvest(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setVaultFractionToInvest(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shouldUpgrade(overrides?: CallOverrides): Promise<BigNumber>;

    "shouldUpgrade()"(overrides?: CallOverrides): Promise<BigNumber>;

    strategy(overrides?: CallOverrides): Promise<BigNumber>;

    "strategy()"(overrides?: CallOverrides): Promise<BigNumber>;

    strategyTimeLock(overrides?: CallOverrides): Promise<BigNumber>;

    "strategyTimeLock()"(overrides?: CallOverrides): Promise<BigNumber>;

    strategyUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    "strategyUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    "underlying()"(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingBalanceInVault(overrides?: CallOverrides): Promise<BigNumber>;

    "underlyingBalanceInVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingBalanceWithInvestment(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "underlyingBalanceWithInvestment()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingBalanceWithInvestmentForHolder(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "underlyingBalanceWithInvestmentForHolder(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingUnit(overrides?: CallOverrides): Promise<BigNumber>;

    "underlyingUnit()"(overrides?: CallOverrides): Promise<BigNumber>;

    vaultFractionToInvestDenominator(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vaultFractionToInvestDenominator()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultFractionToInvestNumerator(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vaultFractionToInvestNumerator()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      numberOfShares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      numberOfShares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawAll(overrides?: Overrides): Promise<BigNumber>;

    "withdrawAll()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    announceStrategyUpdate(
      _strategy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "announceStrategyUpdate(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    availableToInvestOut(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "availableToInvestOut()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canUpdateStrategy(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canUpdateStrategy(address)"(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositFor(
      amount: BigNumberish,
      holder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositFor(uint256,address)"(
      amount: BigNumberish,
      holder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    doHardWork(overrides?: Overrides): Promise<PopulatedTransaction>;

    "doHardWork()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    finalizeStrategyUpdate(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "finalizeStrategyUpdate()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    finalizeUpgrade(overrides?: Overrides): Promise<PopulatedTransaction>;

    "finalizeUpgrade()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    futureStrategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "futureStrategy()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPricePerFullShare(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPricePerFullShare()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(string,string,uint8)"(
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,uint256,uint256,uint256,uint256,uint256)"(
      _underlying: string,
      _toInvestNumerator: BigNumberish,
      _toInvestDenominator: BigNumberish,
      _underlyingUnit: BigNumberish,
      _implementationChangeDelay: BigNumberish,
      _strategyChangeDelay: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _storage: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initializeVault(
      _storage: string,
      _underlying: string,
      _toInvestNumerator: BigNumberish,
      _toInvestDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initializeVault(address,address,uint256,uint256)"(
      _storage: string,
      _underlying: string,
      _toInvestNumerator: BigNumberish,
      _toInvestDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nextImplementation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextImplementationDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nextImplementationDelay()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextImplementationTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nextImplementationTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalance(overrides?: Overrides): Promise<PopulatedTransaction>;

    "rebalance()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    scheduleUpgrade(
      impl: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "scheduleUpgrade(address)"(
      impl: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStorage(
      _store: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStorage(address)"(
      _store: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStrategy(
      _strategy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStrategy(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVaultFractionToInvest(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVaultFractionToInvest(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shouldUpgrade(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shouldUpgrade()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "strategy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategyTimeLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "strategyTimeLock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    strategyUpdateTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "strategyUpdateTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "underlying()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingBalanceInVault(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "underlyingBalanceInVault()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingBalanceWithInvestment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "underlyingBalanceWithInvestment()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingBalanceWithInvestmentForHolder(
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "underlyingBalanceWithInvestmentForHolder(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingUnit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "underlyingUnit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultFractionToInvestDenominator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vaultFractionToInvestDenominator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultFractionToInvestNumerator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vaultFractionToInvestNumerator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      numberOfShares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      numberOfShares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawAll(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawAll()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
